/**
 * Note: This is a mock implementation for demonstration purposes.
 * In a production environment, you would use libraries like jsPDF or pdfmake 
 * to actually generate PDF files for download.
 */

export const generateResultsPdf = (
  title: string,
  overallScore: number,
  sectionScores: { title: string; percentage: number }[],
  completedDate: string,
  filename: string
) => {
  console.log(`Generating PDF report for ${title}`);
  console.log(`Overall Score: ${overallScore}%`);
  console.log(`Completed: ${completedDate}`);
  console.log(`Sections: ${sectionScores.map(s => s.title).join(', ')}`);
  
  // In a production implementation, this would create a PDF and trigger a download
  // For demo purposes, create a simple file download to demonstrate functionality
  const htmlContent = `
    <html>
      <head>
        <title>${title}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          h1 { color: #1E3B8A; }
          .score { font-size: 24px; font-weight: bold; color: #2D7D7D; }
          .date { color: #666; margin-bottom: 20px; }
          .section { margin-top: 10px; }
        </style>
      </head>
      <body>
        <h1>${title}</h1>
        <div class="date">Completed: ${completedDate}</div>
        <div class="score">Overall Score: ${overallScore}%</div>
        <h2>Section Scores:</h2>
        ${sectionScores.map(section => 
          `<div class="section"><strong>${section.title}</strong>: ${section.percentage}%</div>`
        ).join('')}
        <p>This is a demonstration PDF generated by VendorSoluce.</p>
      </body>
    </html>
  `;
  
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const generateRecommendationsPdf = (
  title: string,
  recommendations: any[],
  date: string,
  filename: string
) => {
  console.log(`Generating recommendations PDF for ${title}`);
  console.log(`Date: ${date}`);
  console.log(`Recommendations: ${recommendations.length}`);
  
  // Create a simple HTML representation of the recommendations
  const htmlContent = `
    <html>
      <head>
        <title>${title}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          h1 { color: #1E3B8A; }
          .date { color: #666; margin-bottom: 20px; }
          .recommendation { 
            border-left: 3px solid #2D7D7D; 
            padding: 10px; 
            margin: 15px 0; 
            background: #f9f9f9; 
          }
          .priority-critical { color: #DC2626; }
          .priority-high { color: #EA580C; }
          .priority-medium { color: #F59E0B; }
          .priority-low { color: #16A34A; }
        </style>
      </head>
      <body>
        <h1>${title}</h1>
        <div class="date">Date: ${date}</div>
        <h2>Recommendations:</h2>
        ${recommendations.map((rec: any) => `
          <div class="recommendation">
            <h3 class="priority-${rec.priority}">${rec.title} (${rec.priority.toUpperCase()})</h3>
            <p>${rec.description}</p>
            <p><strong>Category:</strong> ${rec.category}</p>
            <p><strong>Effort:</strong> ${rec.effort}</p>
            <p><strong>Timeframe:</strong> ${rec.timeframe}</p>
          </div>
        `).join('')}
        <p>This is a demonstration PDF generated by VendorSoluce.</p>
      </body>
    </html>
  `;
  
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

// Add a function to handle template downloads
export const downloadTemplateFile = (templatePath: string, filename: string) => {
  // For demonstration purposes, we're generating a simple file based on the template type
  let content = '';
  let mimeType = 'text/plain';
  
  if (filename.endsWith('.html') || filename.endsWith('.docx')) {
    // Create a simple HTML file for HTML/DOCX templates
    content = `
      <html>
        <head>
          <title>VendorSoluce Template - ${filename}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #1E3B8A; }
            .content { border: 1px solid #ddd; padding: 20px; margin: 20px 0; }
          </style>
        </head>
        <body>
          <h1>VendorSoluce Template</h1>
          <p>This is a demonstration template file for: ${filename}</p>
          <div class="content">
            <h2>Template Content Would Appear Here</h2>
            <p>In a production environment, this would be a fully-formatted ${
              filename.endsWith('.docx') ? 'Word document' : 'HTML template'
            }.</p>
          </div>
          <p>For more information, please contact support@vendorsoluce.com</p>
        </body>
      </html>
    `;
    mimeType = 'text/html';
  } else if (filename.endsWith('.json')) {
    // Create a simple JSON file
    content = JSON.stringify({
      template: filename,
      description: "VendorSoluce template file",
      generatedAt: new Date().toISOString(),
      note: "This is a demonstration template file"
    }, null, 2);
    mimeType = 'application/json';
  } else if (filename.endsWith('.csv') || filename.endsWith('.xlsx')) {
    // Create a simple CSV file
    content = `"Template","Description","Generated At"
"${filename}","VendorSoluce template file","${new Date().toISOString()}"
"Note:","This is a demonstration template file",""`;
    mimeType = 'text/csv';
  } else if (filename.endsWith('.sh')) {
    // Create a simple shell script
    content = `#!/bin/bash
# VendorSoluce Template Shell Script
# Generated on: ${new Date().toISOString()}

echo "VendorSoluce SBOM Generator Template"
echo "This is a demonstration script file"
echo "For more information, please contact support@vendorsoluce.com"

# This would contain actual script content in production
`;
    mimeType = 'text/plain';
  } else if (filename.endsWith('.ppt') || filename.endsWith('.pptx')) {
    // Create a simple HTML that looks like a PowerPoint template
    content = `
      <html>
        <head>
          <title>VendorSoluce Template - ${filename}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .slide { 
              border: 1px solid #ddd; 
              padding: 20px; 
              margin: 20px 0; 
              height: 400px;
              display: flex;
              flex-direction: column;
              background-color: #f9f9f9;
            }
            .slide-header { background-color: #1E3B8A; color: white; padding: 10px; }
            .slide-content { flex: 1; padding: 20px; }
            .slide-footer { text-align: center; padding: 10px; color: #666; }
          </style>
        </head>
        <body>
          <h1>VendorSoluce PowerPoint Template</h1>
          <div class="slide">
            <div class="slide-header">
              <h2>Template: ${filename}</h2>
            </div>
            <div class="slide-content">
              <p>This is a demonstration PowerPoint template file.</p>
              <p>In a production environment, this would be a fully-formatted PowerPoint presentation.</p>
            </div>
            <div class="slide-footer">VendorSoluce Â© ${new Date().getFullYear()}</div>
          </div>
          <p>For more information, please contact support@vendorsoluce.com</p>
        </body>
      </html>
    `;
    mimeType = 'text/html';
  }

  // Create blob and trigger download
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};