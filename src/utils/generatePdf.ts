import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { getTemplateUrl, downloadFromStorage, fileExists } from './supabaseStorage';

// Storage bucket for templates
const TEMPLATES_BUCKET = 'templates';

/**
 * Generate PDF from HTML content
 */
const generatePdfFromHtml = async (htmlContent: string, filename: string) => {
  // Create a temporary div to render HTML
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = htmlContent;
  tempDiv.style.position = 'absolute';
  tempDiv.style.left = '-9999px';
  tempDiv.style.width = '210mm'; // A4 width
  tempDiv.style.padding = '20px';
  tempDiv.style.fontFamily = 'Arial, sans-serif';
  tempDiv.style.fontSize = '12px';
  tempDiv.style.lineHeight = '1.4';
  tempDiv.style.color = '#333';
  tempDiv.style.backgroundColor = '#fff';

  document.body.appendChild(tempDiv);

  try {
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 295; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    // Add the first page
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // Add additional pages if needed
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(filename);
  } finally {
    document.body.removeChild(tempDiv);
  }
};

export const generateResultsPdf = async (
  title: string,
  overallScore: number,
  sectionScores: { title: string; percentage: number }[],
  completedDate: string,
  filename: string
) => {
  const getScoreColor = (score: number) => {
    if (score >= 80) return '#16A34A';
    if (score >= 60) return '#F59E0B';
    if (score >= 40) return '#EA580C';
    return '#DC2626';
  };

  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #1E3B8A; padding-bottom: 20px;">
        <h1 style="color: #1E3B8A; margin: 0; font-size: 28px;">${title}</h1>
        <p style="color: #666; margin: 10px 0 0 0; font-size: 16px;">Completed: ${completedDate}</p>
      </div>
      
      <div style="text-align: center; margin-bottom: 40px; padding: 30px; background-color: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
        <div style="font-size: 48px; font-weight: bold; color: ${getScoreColor(overallScore)}; margin-bottom: 10px;">${overallScore}%</div>
        <div style="font-size: 18px; color: #374151;">Overall Compliance Score</div>
      </div>
      
      <h2 style="color: #2D7D7D; margin-bottom: 20px; font-size: 22px;">Section Scores</h2>
      <div style="margin-bottom: 30px;">
        ${sectionScores.map(section => `
          <div style="margin-bottom: 15px; padding: 15px; background-color: #f9fafb; border-radius: 6px; border-left: 4px solid ${getScoreColor(section.percentage)};">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
              <span style="font-weight: 600; color: #374151;">${section.title}</span>
              <span style="font-weight: 600; color: ${getScoreColor(section.percentage)};">${section.percentage}%</span>
            </div>
            <div style="width: 100%; height: 8px; background-color: #e5e7eb; border-radius: 4px; overflow: hidden;">
              <div style="width: ${section.percentage}%; height: 100%; background-color: ${getScoreColor(section.percentage)}; border-radius: 4px;"></div>
            </div>
          </div>
        `).join('')}
      </div>
      
      <div style="margin-top: 40px; padding: 20px; background-color: #f0f7ff; border-radius: 8px; border: 1px solid #3B82F6;">
        <h3 style="color: #1E3B8A; margin: 0 0 10px 0; font-size: 18px;">Assessment Summary</h3>
        <p style="color: #374151; margin: 0; line-height: 1.6;">
          This assessment evaluates your organization's supply chain risk management practices based on NIST SP 800-161 guidelines. 
          Scores above 80% indicate strong compliance, while scores below 60% suggest areas requiring immediate attention.
        </p>
      </div>
      
      <div style="margin-top: 30px; text-align: center; color: #6B7280; font-size: 12px; border-top: 1px solid #e5e7eb; padding-top: 20px;">
        <p style="margin: 0;">Generated by VendorSoluce Supply Chain Risk Management Platform</p>
        <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} VendorSoluce. All rights reserved.</p>
      </div>
    </div>
  `;

  await generatePdfFromHtml(htmlContent, filename);
};

export const generateRecommendationsPdf = async (
  title: string,
  recommendations: any[],
  date: string,
  filename: string
) => {
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return '#DC2626';
      case 'high': return '#EA580C';
      case 'medium': return '#F59E0B';
      case 'low': return '#16A34A';
      default: return '#6B7280';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical': return 'üî¥';
      case 'high': return 'üü†';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return '‚ö™';
    }
  };

  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #1E3B8A; padding-bottom: 20px;">
        <h1 style="color: #1E3B8A; margin: 0; font-size: 28px;">${title}</h1>
        <p style="color: #666; margin: 10px 0 0 0; font-size: 16px;">Generated: ${date}</p>
      </div>
      
      <div style="margin-bottom: 30px; padding: 20px; background-color: #f0f7ff; border-radius: 8px; border: 1px solid #3B82F6;">
        <h2 style="color: #1E3B8A; margin: 0 0 10px 0; font-size: 20px;">Executive Summary</h2>
        <p style="color: #374151; margin: 0; line-height: 1.6;">
          This document contains ${recommendations.length} prioritized recommendations to improve your supply chain security posture. 
          Recommendations are based on NIST SP 800-161 guidelines and your assessment results.
        </p>
      </div>
      
      <h2 style="color: #2D7D7D; margin-bottom: 20px; font-size: 22px;">Recommendations by Priority</h2>
      
      ${recommendations.map((rec, index) => `
        <div style="margin-bottom: 25px; padding: 20px; background-color: #f9fafb; border-radius: 8px; border-left: 4px solid ${getPriorityColor(rec.priority)};">
          <div style="display: flex; align-items: center; margin-bottom: 15px;">
            <span style="font-size: 18px; margin-right: 8px;">${getPriorityIcon(rec.priority)}</span>
            <h3 style="color: #374151; margin: 0; font-size: 18px; font-weight: 600;">${rec.title}</h3>
            <span style="background-color: ${getPriorityColor(rec.priority)}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: 600; margin-left: auto;">
              ${rec.priority.toUpperCase()}
            </span>
          </div>
          
          <p style="color: #6B7280; margin: 0 0 15px 0; line-height: 1.6;">${rec.description}</p>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px; font-size: 14px;">
            <div>
              <strong style="color: #374151;">Category:</strong> <span style="color: #6B7280;">${rec.category}</span>
            </div>
            <div>
              <strong style="color: #374151;">Effort:</strong> <span style="color: #6B7280;">${rec.effort}</span>
            </div>
            <div>
              <strong style="color: #374151;">Timeframe:</strong> <span style="color: #6B7280;">${rec.timeframe}</span>
            </div>
            <div>
              <strong style="color: #374151;">Impact:</strong> <span style="color: #6B7280;">High</span>
            </div>
          </div>
          
          ${rec.steps && rec.steps.length > 0 ? `
            <div style="margin-top: 15px;">
              <strong style="color: #374151; font-size: 14px;">Implementation Steps:</strong>
              <ol style="margin: 8px 0 0 20px; padding: 0; color: #6B7280; font-size: 13px; line-height: 1.5;">
                ${rec.steps.slice(0, 3).map((step: string) => `<li style="margin-bottom: 4px;">${step}</li>`).join('')}
                ${rec.steps.length > 3 ? `<li style="color: #9CA3AF; font-style: italic;">... and ${rec.steps.length - 3} more steps</li>` : ''}
              </ol>
            </div>
          ` : ''}
        </div>
      `).join('')}
      
      <div style="margin-top: 40px; padding: 20px; background-color: #fef3c7; border-radius: 8px; border: 1px solid #F59E0B;">
        <h3 style="color: #92400E; margin: 0 0 10px 0; font-size: 18px;">‚ö†Ô∏è Implementation Guidelines</h3>
        <ul style="color: #78350F; margin: 0; padding-left: 20px; line-height: 1.6;">
          <li>Address critical and high-priority recommendations first</li>
          <li>Assign clear ownership and timelines for each recommendation</li>
          <li>Track implementation progress regularly</li>
          <li>Re-assess your supply chain security posture quarterly</li>
        </ul>
      </div>
      
      <div style="margin-top: 30px; text-align: center; color: #6B7280; font-size: 12px; border-top: 1px solid #e5e7eb; padding-top: 20px;">
        <p style="margin: 0;">Generated by VendorSoluce Supply Chain Risk Management Platform</p>
        <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} VendorSoluce. All rights reserved.</p>
      </div>
    </div>
  `;

  await generatePdfFromHtml(htmlContent, filename);
};

// Enhanced template download function with real file generation
export const downloadTemplateFile = async (templatePath: string, filename: string) => {
  let content = '';
  let mimeType = 'text/plain';
  
  try {
    // Convert local path to storage path
    const storagePath = templatePath.startsWith('/templates/') 
      ? templatePath.substring('/templates/'.length)
      : templatePath.startsWith('templates/')
      ? templatePath.substring('templates/'.length)
      : templatePath;
    
    // Check if file exists in Supabase Storage
    const exists = await fileExists(TEMPLATES_BUCKET, storagePath);
    
    if (exists) {
      // Download from Supabase Storage
      const blob = await downloadFromStorage(TEMPLATES_BUCKET, storagePath);
      content = await blob.text();
      mimeType = blob.type || 'text/plain';
    } else {
      // Fallback: try to fetch from public folder (for development)
      const response = await fetch(templatePath);
      if (response.ok) {
        content = await response.text();
        mimeType = response.headers.get('content-type') || 'text/plain';
      } else {
        throw new Error('Template not found in storage or public folder');
      }
    }
    
    if (filename.endsWith('.html') || filename.endsWith('.docx')) {
      mimeType = 'text/html';
    } else if (filename.endsWith('.json')) {
      mimeType = 'application/json';
    } else if (filename.endsWith('.csv') || filename.endsWith('.xlsx')) {
      mimeType = 'text/csv';
    } else if (filename.endsWith('.sh')) {
      mimeType = 'text/plain';
    } else if (filename.endsWith('.pdf')) {
      // Generate PDF from HTML template
      const htmlStoragePath = storagePath.replace('.pdf', '.html');
      const htmlExists = await fileExists(TEMPLATES_BUCKET, htmlStoragePath);
      
      if (htmlExists) {
        const htmlBlob = await downloadFromStorage(TEMPLATES_BUCKET, htmlStoragePath);
        const htmlContent = await htmlBlob.text();
        await generatePdfFromHtml(htmlContent, filename);
        return;
      } else {
        throw new Error('HTML template not found for PDF generation');
      }
    }

    // Create blob and trigger download
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error downloading template:', error);
    // Fallback to mock content if template file doesn't exist in storage or public folder
    generateMockTemplate(filename);
  }
};

const generateMockTemplate = (filename: string) => {
  let content = '';
  let mimeType = 'text/plain';
  
  if (filename.endsWith('.html') || filename.endsWith('.docx')) {
    content = `
      <html>
        <head>
          <title>VendorSoluce Template - ${filename}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #1E3B8A; }
            .content { border: 1px solid #ddd; padding: 20px; margin: 20px 0; }
          </style>
        </head>
        <body>
          <h1>VendorSoluce Template</h1>
          <p>This is a demonstration template file for: ${filename}</p>
          <div class="content">
            <h2>Template Content Would Appear Here</h2>
            <p>In a production environment, this would be a fully-formatted template.</p>
          </div>
        </body>
      </html>
    `;
    mimeType = 'text/html';
  } else if (filename.endsWith('.json')) {
    content = JSON.stringify({
      template: filename,
      description: "VendorSoluce template file",
      generatedAt: new Date().toISOString(),
      note: "This is a demonstration template file"
    }, null, 2);
    mimeType = 'application/json';
  } else if (filename.endsWith('.csv') || filename.endsWith('.xlsx')) {
    content = `"Template","Description","Generated At"
"${filename}","VendorSoluce template file","${new Date().toISOString()}"`;
    mimeType = 'text/csv';
  }

  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};